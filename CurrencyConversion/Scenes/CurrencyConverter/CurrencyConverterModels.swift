//
//  CurrencyConverterModels.swift
//  CurrencyConversion
//
//  Created by Henrikas J on 09/01/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import RealmSwift

protocol DisplayedObject {

}

enum ErrorType: Error {
  case InvalidConversionInput
  case DatabaseRequestedObjectNotExisting
  case UnsuportedCurrencyRequest
  case InsufficientConvertingFunds
}

enum CurrencyConverter {
  // MARK: Use cases
  
  enum FetchCurrencyConversion {
    struct Request {
      var fromAmount: String
      var fromCurrency: String
      var toCurrency: String
    }

    struct Response {
      var conversion: ConvertedCurrency?
      var error: Error?
    }

    struct ViewModel {
      var receive: String
    }
  }

  enum FetchCurrencyConversionContract {
    struct Request {
      var fromAmount: String
      var fromCurrency: String
      var toCurrency: String
    }

    struct Response {
      var fromAmount: String?
      var totalAmount: Double?
      var fromCurrency: String?
      var toCurrency: String?
      var toAmount: String?
      var feeRate: Double?
      var fee: Double?
      var validRequest: Bool?
      var error: Error?
    }

    struct ViewModel {
      var message: String
      var validRequest: Bool
    }
  }

  enum CompleteCurrencyConversionContract {
    struct Request {
      var fromAmount: String
      var fromCurrency: String
      var toCurrency: String
    }

    struct Response {
      var totalAmount: Double?
      var fromCurrency: String?
      var toCurrency: String?
      var toAmount: String?
      var fee: Double?
      var error: Error?
    }

    struct ViewModel {
      var message: String
    }
  }

  enum ErrorAlert {
    struct Request {
    }

    struct Response {
      var error: Error
    }

    struct ViewModel {
      var title: String
      var message: String
      var buttonTitle: String
    }
  }

  enum Something {
    struct Request
    {
    }

    struct Response
    {
    }

    struct ViewModel
    {
    }
  }

  enum CollectionView {
    enum CellType {
      case Balance
    }

    struct Request {
      var type: CellType
    }

    struct Response {
      struct BalanceCell {
        var objects: Results<StoredCurrency>?
        var error: Error?
      }
    }

    struct ViewModel {
      struct BalanceCell: DisplayedObject {
        var currencyName: String
        var holdingAmount: String
      }

      var displayedObjects: [DisplayedObject]
    }
  }
}
