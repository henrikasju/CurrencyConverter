//
//  CurrencyConverterViewController.swift
//  CurrencyConversion
//
//  Created by Henrikas J on 09/01/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Stevia

protocol CurrencyConverterDisplayLogic: class
{
  func displayCurrencyConversion(viewModel: CurrencyConverter.FetchCurrencyConversion.ViewModel)
  func displayErrorAlert(viewModel: CurrencyConverter.ErrorAlert.ViewModel)
}

class CurrencyConverterViewController: UIViewController, CurrencyConverterDisplayLogic
{
  var interactor: CurrencyConverterBusinessLogic?
  var router: (NSObjectProtocol & CurrencyConverterRoutingLogic & CurrencyConverterDataPassing)?

  private let v = CurrencyConverterView()
  override func loadView() { view = v }

  private var conversionSection: (
    input: (textField: UITextField?, currencySelectionButton: UIButton?)?,
    output: (textField: UITextField?, currencySelectionButton: UIButton?)?
  )

  private let currencyPickerView: UIPickerView = {
    let pickerView = UIPickerView()

    return pickerView
  }()

  private let inputViewToolBar: UIToolbar = {
    let toolBar = UIToolbar()
    toolBar.sizeToFit()
    toolBar.isUserInteractionEnabled = true

    return toolBar
  }()

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = CurrencyConverterInteractor()
    let presenter = CurrencyConverterPresenter()
    let router = CurrencyConverterRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    interactor.currencyConversionWorker = CurrencyConversionWorker()
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  override func viewWillAppear(_ animated: Bool) {
    navigationItem.title = "Currency converter"
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()

    v.collectionView.collectionViewLayout = createCompositionalLayout()
    v.collectionView.dataSource = self

    currencyPickerView.delegate = self
    currencyPickerView.dataSource = self

    v.collectionView.register(
      HorizontalBalanceCollectionViewCell.self,
      forCellWithReuseIdentifier: HorizontalBalanceCollectionViewCell.identifier)
    v.collectionView.register(
      CurrencyExchangeCollectionViewCell.self,
      forCellWithReuseIdentifier: CurrencyExchangeCollectionViewCell.identifier)
    v.collectionView.register(TitleHeaderCollectionReusableView.self,
      forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
      withReuseIdentifier: TitleHeaderCollectionReusableView.identifier)

    v.submitButton.addTarget(self, action: #selector(submitButtonPressed(sender:)), for: .touchUpInside)

    let doneButton = UIBarButtonItem(title: "Done", style: .plain, target: self, action: #selector(self.endEditing))
    // BUG
//    inputViewToolBar.setItems([doneButton], animated: true)


//    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func performCurrencyConversion(request: CurrencyConverter.FetchCurrencyConversion.Request)
  {
    interactor?.fetchCurrencyConversion(request: request)
  }
  
  func displayCurrencyConversion(viewModel: CurrencyConverter.FetchCurrencyConversion.ViewModel)
  {
    conversionSection.output?.textField?.text = viewModel.receive
  }

  func displayErrorAlert(viewModel: CurrencyConverter.ErrorAlert.ViewModel) {
    Alert.showErrorAlert(on: self, title: viewModel.title, message: viewModel.message, buttonTitle: viewModel.buttonTitle, buttonHandler: nil, completion: nil)
  }

  private func createCompositionalLayout() -> UICollectionViewCompositionalLayout {
    return UICollectionViewCompositionalLayout { (sectionNumber, env) -> NSCollectionLayoutSection? in
      switch sectionNumber {
        case 0: return self.horizontalScrollLayoutSection()
        default: return self.singleRowLayoutSection()
      }
    }
  }

  private func horizontalScrollLayoutSection() -> NSCollectionLayoutSection {
    let itemSize = NSCollectionLayoutSize(widthDimension: .estimated(40), heightDimension: .absolute(40))
    let item = NSCollectionLayoutItem(layoutSize: itemSize)
    
    let group = NSCollectionLayoutGroup.horizontal(layoutSize: itemSize, subitems: [item])

    let headerSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .estimated(40))
    let header = NSCollectionLayoutBoundarySupplementaryItem(layoutSize: headerSize, elementKind: UICollectionView.elementKindSectionHeader, alignment: .top)

    let section = NSCollectionLayoutSection(group: group)
    section.boundarySupplementaryItems = [header]
    section.orthogonalScrollingBehavior = .continuous
    section.interGroupSpacing = 40
    section.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 12, bottom: 0, trailing: 12)

    return section
  }

  private func singleRowLayoutSection() -> NSCollectionLayoutSection {
    let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .estimated(60))
    let item = NSCollectionLayoutItem(layoutSize: itemSize)

    let group = NSCollectionLayoutGroup.horizontal(layoutSize: itemSize, subitems: [item])
    let headerSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .estimated(40))
    let header = NSCollectionLayoutBoundarySupplementaryItem(layoutSize: headerSize, elementKind: UICollectionView.elementKindSectionHeader, alignment: .top)

    let section = NSCollectionLayoutSection(group: group)
    section.boundarySupplementaryItems = [header]
    section.interGroupSpacing = 2
    section.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 12, bottom: 0, trailing: 12)


    return section
  }



  @objc func endEditing() {
    view.endEditing(true)
  }
}

//MARK: - UICollectionViewDataSource
extension CurrencyConverterViewController: UICollectionViewDataSource {

  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    switch section {
    case 0:
      return 9
    case 1:
      return 2
    default:
      return 0
    }
  }

  func numberOfSections(in collectionView: UICollectionView) -> Int {
    return 2
  }

  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

    if indexPath.section == 0,
    let cell = collectionView.dequeueReusableCell( withReuseIdentifier: HorizontalBalanceCollectionViewCell.identifier,
                                                   for: indexPath) as? HorizontalBalanceCollectionViewCell {

      cell.amountLabel.text(String(repeating: "0", count: indexPath.row) + "00.00")

      return cell
    } else if indexPath.section == 1,
      let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CurrencyExchangeCollectionViewCell.identifier,
                                                    for: indexPath) as? CurrencyExchangeCollectionViewCell {
      cell.inputTextField.keyboardType = .decimalPad

      if indexPath.row == 0 {
        cell.actionLabel.text("Sell")
        cell.actionImageView.image = UIImage(named: "currencySellImage")

        cell.inputTextField.inputView = currencyPickerView
        cell.inputTextField.inputAccessoryView = inputViewToolBar

        cell.inputTextField.delegate = self

        // TODO: Fix this spagettoni, should be cell protocol of a button, with cell purpose enum like .input ;/
        conversionSection.input?.textField = cell.inputTextField
        conversionSection.input = (cell.inputTextField, cell.currencySelectionButton)

        cell.currencySelectionButton.addTarget(self, action: #selector(currencyTypeSelectionButtonPressed(sender:)), for: .touchUpInside)

      }else if indexPath.row == 1 {
        cell.actionLabel.text("Receive")
        cell.actionImageView.image = UIImage(named: "currencyReceiveImage")
        cell.inputTextField.textColor = .systemGreen
        cell.inputTextField.isUserInteractionEnabled = false

        cell.inputTextField.delegate = self
        conversionSection.output = (cell.inputTextField, cell.currencySelectionButton)
      }
      
      return cell
    }else{
      fatalError("Could not deque cell!")
    }
  }

  func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {

    if kind == UICollectionView.elementKindSectionHeader,
       let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: TitleHeaderCollectionReusableView.identifier, for: indexPath) as? TitleHeaderCollectionReusableView {

      headerView.backgroundColor = .clear

      if indexPath.section == 0 {
        headerView.titleLabel.text("MY BALANCES")
      }else if indexPath.section == 1 {
        headerView.titleLabel.text("CURRENCY EXCHANGE")
      }

      return headerView
    }else{
      fatalError("Could not deque section header!")
    }
  }
}

var idk: CGFloat = -270

//MARK: - UIButton Targets
extension CurrencyConverterViewController {

  @objc func submitButtonPressed(sender: UIButton) {
    if sender == v.submitButton {
      print("Submit button pressed!")

      Alert.showBasicAlert(on: self,
                           title: "Currency conversion",
                           message: "Do you want to convert?",
                           leftButtonTitle: "Cancel",
                           rightButttonTitle: "Approve",
                           leftButtonHandler: { alertAction in
                            print("leftButtonPressed - Cancel!")
                           }, rightButtonHandler: { alertAction in
                            print("rightButtonPressed - Approve!")
                           }, completion: nil)


      UIView.animate(withDuration: 0.1) {
        self.v.submitButtonBottomConstraint?.constant = idk
        self.v.layoutIfNeeded()
      }

      if idk == -270 {
        idk = 0
      }else{
        idk = -270
      }
    }
  }

  @objc func currencyTypeSelectionButtonPressed(sender: UIButton){
    print("Currency Type button pressed!")
  }
}

extension CurrencyConverterViewController: UITextFieldDelegate {
  func textFieldDidChangeSelection(_ textField: UITextField) {
    let request = CurrencyConverter.FetchCurrencyConversion.Request(fromAmount: textField.text ?? "", fromCurrency: "EUR", toCurrency: "USD")
    performCurrencyConversion(request: request)
  }
}

//MARK: - UIPickerViewDelegate
extension CurrencyConverterViewController: UIPickerViewDelegate {

}

//MARK: - UIPickerViewDataSource
extension CurrencyConverterViewController: UIPickerViewDataSource {
  func numberOfComponents(in pickerView: UIPickerView) -> Int {
    return 1
  }

  func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
    return 5
  }

  func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
    return "Title - " + String(row)
  }
}
