//
//  CurrencyConverterViewController.swift
//  CurrencyConversion
//
//  Created by Henrikas J on 09/01/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Stevia

// TODO: on scroll close keyboard!

protocol CurrencyConverterDisplayLogic: class
{
  func displayCurrencyConversion(viewModel: CurrencyConverter.FetchCurrencyConversion.ViewModel)
  func displayCurrencyConversionOnExchangeCells(viewModel: CurrencyConverter.CollectionView.ViewModel)
  func displayErrorAlert(viewModel: CurrencyConverter.ErrorAlert.ViewModel)
  func displayCollectionViewBalances(viewModel: CurrencyConverter.CollectionView.ViewModel?)
  func displayCurrencyConversionContract(viewModel: CurrencyConverter.FetchCurrencyConversionContract.ViewModel)
  func displayCompleteCurrencyConversionContract(viewModel: CurrencyConverter.CompleteCurrencyConversionContract.ViewModel)
  func storeAvailableCurrencies(viewModel: CurrencyConverter.FetchAvailableCurrencies.ViewModel)
}

class CurrencyConverterViewController: UIViewController, CurrencyConverterDisplayLogic
{
  var interactor: CurrencyConverterBusinessLogic!
  var router: (NSObjectProtocol & CurrencyConverterRoutingLogic & CurrencyConverterDataPassing)?

  private let currencyPickerView = ToolbarPickerView()

  private let v = CurrencyConverterView()
  override func loadView() { view = v }

  var balancesViewModels: [CurrencyConverter.CollectionView.ViewModel.BalanceCell] = []
  var currencyExchangeViewModels: [CurrencyConverter.CollectionView.ViewModel.CurrencyExchangeCell] = [
    CurrencyConverter.CollectionView.ViewModel.CurrencyExchangeCell(image: UIImage(named: "currencySellImage"),
                                                                    title: "Sell",
                                                                    value: "0.00"),
    CurrencyConverter.CollectionView.ViewModel.CurrencyExchangeCell(image: UIImage(named:"currencyReceiveImage"),
                                                                    title: "Receive",
                                                                    value: "0.00")
  ]

  var selectedSellCurrency: String?
  var selectedReceiveCurrency: String?

  var availableCurrencies: [String] = []

  let currencySelectionDummyTextField = UITextField()
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()

    navigationItem.title = "Currency converter"

    setupUIComponents()
    setupInitialData()
    setupCurrencySelection()
    setupNotificationCenter()
  }

  private func setupCurrencySelection() {
    selectedSellCurrency = availableCurrencies[0]
    selectedReceiveCurrency = availableCurrencies[1]
    currencyExchangeViewModels[0].selectedCurrency = selectedSellCurrency
    currencyExchangeViewModels[1].selectedCurrency = selectedReceiveCurrency
  }

  private func setupUIComponents(){
    v.collectionView.collectionViewLayout = createCompositionalLayout()
    v.collectionView.dataSource = self

    currencyPickerView.delegate = self
    currencyPickerView.dataSource = self
    currencyPickerView.toolBarDelegate = self

    currencySelectionDummyTextField.inputView = currencyPickerView
    currencySelectionDummyTextField.inputAccessoryView = currencyPickerView.toolbar
    currencySelectionDummyTextField.isHidden = true

    v.collectionView.register(
      HorizontalBalanceCollectionViewCell.self,
      forCellWithReuseIdentifier: HorizontalBalanceCollectionViewCell.identifier)
    v.collectionView.register(
      CurrencyExchangeCollectionViewCell.self,
      forCellWithReuseIdentifier: CurrencyExchangeCollectionViewCell.identifier)
    v.collectionView.register(TitleHeaderCollectionReusableView.self,
      forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
      withReuseIdentifier: TitleHeaderCollectionReusableView.identifier)

    v.submitButton.addTarget(self, action: #selector(submitButtonPressed(sender:)), for: .touchUpInside)
  }

  private func setupInitialData() {
    fetchCollectionViewModels(cellType: .Balance)
    fetchAvailableCurrencies(request: CurrencyConverter.FetchAvailableCurrencies.Request())
  }

  private func setupNotificationCenter() {
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardUpdated(notification:)), name: UIResponder.keyboardWillShowNotification, object: nil)
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardUpdated(notification:)), name: UIResponder.keyboardWillHideNotification, object: nil)
  }

  override func viewWillLayoutSubviews() {
    if view.safeAreaInsets.bottom == 0 && v.submitButton.bottomConstraint?.constant == 0{
      v.submitButton.bottomConstraint?.constant = -12
    }

    view.addSubview(currencySelectionDummyTextField)
  }

  func fetchCollectionViewModels(cellType: CurrencyConverter.CollectionView.CellType) {
    let request = CurrencyConverter.CollectionView.Request(type: cellType)
    interactor?.fetchCollectionViewModels(request: request)
  }

  func displayCollectionViewBalances(viewModel: CurrencyConverter.CollectionView.ViewModel?) {
    if viewModel != nil {
      balancesViewModels = viewModel!.displayedObjects as! [CurrencyConverter.CollectionView.ViewModel.BalanceCell]
    }
    v.collectionView.reloadData()
  }
  
  func performCurrencyConversion(request: CurrencyConverter.FetchCurrencyConversion.Request) {
    interactor?.fetchCurrencyConversion(request: request)
  }
  
  func displayCurrencyConversion(viewModel: CurrencyConverter.FetchCurrencyConversion.ViewModel) {
    if let cell = v.collectionView.cellForItem(at: IndexPath(row: 1, section: 1)) as? CurrencyExchangeCollectionViewCell {
      cell.inputTextField.text = viewModel.receive
    }
  }

  func displayCurrencyConversionOnExchangeCells(viewModel: CurrencyConverter.CollectionView.ViewModel) {
    currencyExchangeViewModels = viewModel.displayedObjects as! [CurrencyConverter.CollectionView.ViewModel.CurrencyExchangeCell]

    UIView.performWithoutAnimation({
      v.collectionView.reloadItems(at: [IndexPath(row: 1, section: 1)])
    })
  }

  func displayErrorAlert(viewModel: CurrencyConverter.ErrorAlert.ViewModel) {
    Alert.showSingleButtonAlert(on: self, title: viewModel.title, message: viewModel.message, buttonTitle: viewModel.buttonTitle, buttonHandler: nil, completion: nil)

    if let knownError = viewModel.error as? ErrorType {
      switch knownError {
      case .InvalidConversionInput(_):
        if let cell = v.collectionView.cellForItem(at: IndexPath(row: 0, section: 1)) as? CurrencyExchangeCollectionViewCell {
          cell.inputTextField.text = "0.00"
        }
        break
      case .DatabaseRequestedObjectNotExisting(_):
        break
      case .UnsuportedCurrencyRequest(_):
        break
      case .InsufficientConvertingFunds(_):
        break
      }
    }

  }

  func fetchCurrencyConversionContract(request: CurrencyConverter.FetchCurrencyConversionContract.Request) {
    interactor?.fetchCurrencyConversionContract(request: request)
  }

  func displayCurrencyConversionContract(viewModel: CurrencyConverter.FetchCurrencyConversionContract.ViewModel) {
    // TODO: Alert text is poorly formated
    Alert.showBasicAlert(on: self, title: "Convert Currency", message: viewModel.message, leftButtonTitle: "Cancel", rightButttonTitle: "Continue") { _ in
      print("Cancelled")
    } rightButtonHandler: { _ in
      // Procced with currency conversion!
      print("Convert Currency!")
      if let inputCell = self.v.collectionView.cellForItem(at: IndexPath(row: 0, section: 1)) as? CurrencyExchangeCollectionViewCell,
         let fromCurrency = self.selectedSellCurrency,
         let toCurrency = self.selectedReceiveCurrency {

        let inputAmount = inputCell.inputTextField.text ?? ""

        let request = CurrencyConverter.CompleteCurrencyConversionContract.Request(fromAmount: inputAmount, fromCurrency: fromCurrency, toCurrency: toCurrency)
        self.completeCurrencyConversionContract(request: request)
      }
    } completion: {

    }
  }

  func completeCurrencyConversionContract(request: CurrencyConverter.CompleteCurrencyConversionContract.Request) {
    interactor?.completeCurrencyConversionContract(request: request)
  }

  func displayCompleteCurrencyConversionContract(viewModel: CurrencyConverter.CompleteCurrencyConversionContract.ViewModel) {
    fetchCollectionViewModels(cellType: .Balance)
    Alert.showSingleButtonAlert(on: self, title: "Currency Conversion", message: viewModel.message, buttonTitle: "Awesome!") { _ in

    } completion: {

    }
  }

  func fetchAvailableCurrencies(request: CurrencyConverter.FetchAvailableCurrencies.Request) {
    interactor.fetchAvailableCurrencies(request: request)
  }

  func storeAvailableCurrencies(viewModel: CurrencyConverter.FetchAvailableCurrencies.ViewModel) {
    availableCurrencies = viewModel.currencies
  }

  private func createCompositionalLayout() -> UICollectionViewCompositionalLayout {
    return UICollectionViewCompositionalLayout { (sectionNumber, env) -> NSCollectionLayoutSection? in
      switch sectionNumber {
        case 0: return self.horizontalScrollLayoutSection()
        default: return self.singleRowLayoutSection()
      }
    }
  }

  private func horizontalScrollLayoutSection() -> NSCollectionLayoutSection {
    let itemSize = NSCollectionLayoutSize(widthDimension: .estimated(40), heightDimension: .absolute(40))
    let item = NSCollectionLayoutItem(layoutSize: itemSize)
    
    let group = NSCollectionLayoutGroup.horizontal(layoutSize: itemSize, subitems: [item])

    let headerSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .estimated(40))
    let header = NSCollectionLayoutBoundarySupplementaryItem(layoutSize: headerSize, elementKind: UICollectionView.elementKindSectionHeader, alignment: .top)

    let section = NSCollectionLayoutSection(group: group)
    section.boundarySupplementaryItems = [header]
    section.orthogonalScrollingBehavior = .continuous
    section.interGroupSpacing = 40
    section.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 12, bottom: 0, trailing: 12)

    return section
  }

  private func singleRowLayoutSection() -> NSCollectionLayoutSection {
    let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .estimated(60))
    let item = NSCollectionLayoutItem(layoutSize: itemSize)

    let group = NSCollectionLayoutGroup.horizontal(layoutSize: itemSize, subitems: [item])
    let headerSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .estimated(40))
    let header = NSCollectionLayoutBoundarySupplementaryItem(layoutSize: headerSize, elementKind: UICollectionView.elementKindSectionHeader, alignment: .top)

    let section = NSCollectionLayoutSection(group: group)
    section.boundarySupplementaryItems = [header]
    section.interGroupSpacing = 2
    section.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 12, bottom: 0, trailing: 12)


    return section
  }

  @objc func endEditing() {
    view.endEditing(true)
  }
}

//MARK: - UICollectionViewDataSource
extension CurrencyConverterViewController: UICollectionViewDataSource {

  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    switch section {
    case 0:
      return balancesViewModels.count
    case 1:
      return 2
    default:
      return 0
    }
  }

  func numberOfSections(in collectionView: UICollectionView) -> Int {
    return 2
  }

  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

    if indexPath.section == 0,
    let cell = collectionView.dequeueReusableCell( withReuseIdentifier: HorizontalBalanceCollectionViewCell.identifier,
                                                   for: indexPath) as? HorizontalBalanceCollectionViewCell {

      cell.viewModel = balancesViewModels[indexPath.row]

      return cell
    } else if indexPath.section == 1,
      let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CurrencyExchangeCollectionViewCell.identifier,
                                                    for: indexPath) as? CurrencyExchangeCollectionViewCell {
      cell.inputTextField.keyboardType = .decimalPad
      cell.delegate = self

      if indexPath.row == 0 {
        let viewModel = currencyExchangeViewModels[indexPath.row]

        cell.viewModel = viewModel
        cell.type = .Sell
        cell.inputTextField.textColor = .black
        cell.inputTextField.isUserInteractionEnabled = true
//        cell.inputTextField.inputAccessoryView = keyboardToolBar

      }else if indexPath.row == 1 {
        let viewModel = currencyExchangeViewModels[indexPath.row]

        cell.viewModel = viewModel

        cell.type = .Receive
        cell.inputTextField.textColor = .systemGreen
        cell.inputTextField.isUserInteractionEnabled = false
//        cell.inputTextField.inputAccessoryView = nil
      }
      
      return cell
    }else{
      fatalError("Could not deque cell!")
    }
  }

  func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {

    if kind == UICollectionView.elementKindSectionHeader,
       let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: TitleHeaderCollectionReusableView.identifier, for: indexPath) as? TitleHeaderCollectionReusableView {

      headerView.backgroundColor = .clear

      if indexPath.section == 0 {
        headerView.titleLabel.text("MY BALANCES")
      }else if indexPath.section == 1 {
        headerView.titleLabel.text("CURRENCY EXCHANGE")
      }

      return headerView
    }else{
      fatalError("Could not deque section header!")
    }
  }
}

//MARK: - UIButton Targets
extension CurrencyConverterViewController {

  @objc func submitButtonPressed(sender: UIButton) {
    if sender == v.submitButton {
      print("Submit button pressed!")
      endEditing()
      let sellCell = v.collectionView.cellForItem(at: IndexPath(row: 0, section: 1)) as? CurrencyExchangeCollectionViewCell

      if let fromCurrency = selectedSellCurrency,
         let toCurrency = selectedReceiveCurrency {
        let inputAmount = sellCell?.inputTextField.text ?? ""
        let request = CurrencyConverter.FetchCurrencyConversionContract.Request(fromAmount: inputAmount, fromCurrency: fromCurrency, toCurrency: toCurrency)
        fetchCurrencyConversionContract(request: request)
      }
    }
  }

  @objc func doneToolbarButtonPressed(sender: UIToolbar){
    self.endEditing()
  }
}

//MARK: - UIPickerViewDelegate
extension CurrencyConverterViewController: UIPickerViewDelegate {
  func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
    if let toolbarPicker = pickerView as? ToolbarPickerView {
      toolbarPicker.storingRowIndex = row
    }
  }
}

//MARK: - UIPickerViewDataSource
extension CurrencyConverterViewController: UIPickerViewDataSource {

  func getAvailableCurrenciesForInput() -> [String] {
    return availableCurrencies.filter { currency -> Bool in
      currency != self.currencyExchangeViewModels[1].selectedCurrency
    }
  }

  func getAvailableCurrenciesForOutput() -> [String] {
    return availableCurrencies.filter { currency -> Bool in
      currency != self.currencyExchangeViewModels[0].selectedCurrency
    }
  }

  func numberOfComponents(in pickerView: UIPickerView) -> Int {
    return 1
  }

  func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
    if let toolbarPicker = pickerView as? ToolbarPickerView, toolbarPicker == currencyPickerView {
      switch toolbarPicker.selectionOwner {
      case .Sell:
        return getAvailableCurrenciesForInput().count
      case .Receive:
        return getAvailableCurrenciesForOutput().count
      case .none:
        return 0
      }
    }
    return 0
  }

  func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
    if let toolbarPicker = pickerView as? ToolbarPickerView, toolbarPicker == currencyPickerView {
      switch toolbarPicker.selectionOwner {
      case .Sell:
        return getAvailableCurrenciesForInput()[row]
      case .Receive:
        return getAvailableCurrenciesForOutput()[row]
      case .none:
        return nil
      }
    }
    return nil
  }
}

//MARK: - Keyboard management
extension CurrencyConverterViewController {
  
  @objc func keyboardUpdated(notification: Notification){
    if let userInfo = notification.userInfo,
       let keyboardSize = (userInfo[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue,
       let animationDuration = (userInfo[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double),
       let animationCurve = (userInfo[UIResponder.keyboardAnimationCurveUserInfoKey] as? NSNumber)?.uintValue {

      var bottomInset: CGFloat = 0.0
      var buttonBottomInset: CGFloat = 0.0

      if notification.name == UIResponder.keyboardWillShowNotification {
        bottomInset = -keyboardSize.height
        buttonBottomInset = view.safeAreaInsets.bottom - 12
      }else if notification.name == UIResponder.keyboardWillHideNotification {
        bottomInset = 0
        buttonBottomInset = (view.safeAreaInsets.bottom > 0 ? 0 : -12)
      }

      let curveAnimationOptions = UIView.AnimationOptions(rawValue: animationCurve << 16)
      UIView.animate(withDuration: animationDuration, delay: 0, options: curveAnimationOptions, animations: {
        self.v.submitButton.bottomConstraint?.constant = bottomInset + buttonBottomInset
        self.v.layoutIfNeeded()
      }, completion: nil)
    }
  }
}

//MARK: - CurrencyExchangeCollectionViewCellDelegate
extension CurrencyConverterViewController: CurrencyExchangeCollectionViewCellDelegate {
  func currencySelectionButtonPressed(_ cell: CurrencyExchangeCollectionViewCell, _ button: UIButton) {
    currencySelectionDummyTextField.resignFirstResponder()
    print(availableCurrencies)

    switch cell.type {
    case .Receive:
      print("Exchange cell currency selection button pressed. Type - Receive")
      currencyPickerView.selectionOwner = .Receive
      let indexOfSelectedCurrency = getAvailableCurrenciesForOutput().firstIndex(of: selectedReceiveCurrency!) ?? 0
      currencyPickerView.selectRow(indexOfSelectedCurrency, inComponent: 0, animated: true)
      currencySelectionDummyTextField.becomeFirstResponder()
      break
    case .Sell:
      currencyPickerView.selectionOwner = .Sell
      print("Exchange cell currency selection button pressed. Type - Sell")
      let indexOfSelectedCurrency = getAvailableCurrenciesForInput().firstIndex(of: selectedSellCurrency!) ?? 0
      currencyPickerView.selectRow(indexOfSelectedCurrency, inComponent: 0, animated: true)
      currencySelectionDummyTextField.becomeFirstResponder()
      break
    case .none:
      break
    }
  }

  func textFieldHasBeenEdited(_ cell: CurrencyExchangeCollectionViewCell, _ textField: UITextField, _ type: ExchangeCellType) {
    // should be using current locale ;/
    print("Cell: ", type, "text = ", textField.text)
    textField.text = textField.text?.replacingOccurrences(of: ",", with: ".")

    if let fromCurrency = selectedSellCurrency, let toCurrency = selectedReceiveCurrency {
      let request = CurrencyConverter.FetchCurrencyConversion.Request(fromAmount: textField.text ?? "", fromCurrency: fromCurrency, toCurrency: toCurrency, toCell: .CurrencyExchange)
      performCurrencyConversion(request: request)
    }
  }
}

//MARK: - ToolbarPickerViewDelegate
extension CurrencyConverterViewController: ToolbarPickerViewDelegate {
  func toolbarPressedDone(_ pickerView: UIPickerView) {
    if let currencyPicker = pickerView as? ToolbarPickerView, currencyPicker == self.currencyPickerView {
      let selectedRow = pickerView.selectedRow(inComponent: 0)

      switch currencyPicker.selectionOwner {
      case .Sell:
        selectedSellCurrency = getAvailableCurrenciesForInput()[selectedRow]
        currencyExchangeViewModels[0].selectedCurrency = selectedSellCurrency
        UIView.performWithoutAnimation({
          v.collectionView.reloadItems(at: [IndexPath(row: 0, section: 1)])
        })
        break
      case .Receive:
        selectedReceiveCurrency = getAvailableCurrenciesForOutput()[selectedRow]
        currencyExchangeViewModels[1].selectedCurrency = selectedReceiveCurrency
        break
      case .none:
        break
      }

      if let inputCell = v.collectionView.cellForItem(at: IndexPath(row: 0, section: 1)) as? CurrencyExchangeCollectionViewCell {
        textFieldHasBeenEdited(inputCell, inputCell.inputTextField, .Sell)
      }
    }
    self.endEditing()
  }
}
