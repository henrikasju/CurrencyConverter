//
//  CurrencyConverterPresenter.swift
//  CurrencyConversion
//
//  Created by Henrikas J on 09/01/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import RealmSwift

protocol CurrencyConverterPresentationLogic
{
  func presentCurrencyConversion(response: CurrencyConverter.FetchCurrencyConversion.Response)
  func presentBalanceCells(response: CurrencyConverter.CollectionView.Response.BalanceCell)
  func presentCurrencyConversionContract(response: CurrencyConverter.FetchCurrencyConversionContract.Response)
  func presentCompleteCurrencyConversionContract(response: CurrencyConverter.CompleteCurrencyConversionContract.Response)
}

class CurrencyConverterPresenter: CurrencyConverterPresentationLogic
{
  weak var viewController: CurrencyConverterDisplayLogic?

  // MARK: Do something

  func presentCurrencyConversionErrorAlert(error: Error ) {
    var viewModel: CurrencyConverter.ErrorAlert.ViewModel

    if let knownError = error as? ErrorType {
      switch knownError {
      case .InvalidConversionInput :
        viewModel = CurrencyConverter.ErrorAlert.ViewModel(title: "Invalid Conversion", message: "Invalid conversion input ", buttonTitle: "Close", error: knownError)
      case .DatabaseRequestedObjectNotExisting:
        viewModel = CurrencyConverter.ErrorAlert.ViewModel(title: "Database issue", message: "Requested object from the database does not exist. ", buttonTitle: "Close")
      case .UnsuportedCurrencyRequest:
        viewModel = CurrencyConverter.ErrorAlert.ViewModel(title: "Database issue", message: "Requested unsupported currency. ", buttonTitle: "Close")
      case .InsufficientConvertingFunds:
        viewModel = CurrencyConverter.ErrorAlert.ViewModel(title: "Invalid Conversion", message: "Insufficient conversion funds. " + knownError.localizedDescription, buttonTitle: "Close")

      }
    }else if let apiError = error as? AFError {
      viewModel = CurrencyConverter.ErrorAlert.ViewModel(title: "Server issue", message: "Servers issues, please try again. (\(apiError.localizedDescription))", buttonTitle: "Close")
    }else {
      viewModel = CurrencyConverter.ErrorAlert.ViewModel(title: "App issue", message: "App is currently misbehaving, sorry for inconvenience. " + error.localizedDescription, buttonTitle: "Close")
    }

    viewController?.displayErrorAlert(viewModel: viewModel)
  }
  
  func presentCurrencyConversion(response: CurrencyConverter.FetchCurrencyConversion.Response)
  {
    if let error = response.error {
      print("Display ERROR!!!!!")
      presentCurrencyConversionErrorAlert(error: error)

    }else if let conversion = response.conversion {
      let viewModel = CurrencyConverter.FetchCurrencyConversion.ViewModel(receive: "+ " + conversion.amount)

      viewController?.displayCurrencyConversion(viewModel: viewModel)
    }
  }

  func presentCurrencyConversionContract(response: CurrencyConverter.FetchCurrencyConversionContract.Response) {
    if let error = response.error {
      print("Display ERROR!!!!!")
      presentCurrencyConversionErrorAlert(error: error)

    }else if let fromAmount = response.fromAmount, let fromCurrency = response.fromCurrency,
             let toAmount = response.toAmount, let toCurrency = response.toCurrency,
             let feeRate = response.feeRate, let fee = response.fee,
             let totalAmount = response.totalAmount {

      let message = String(format: "Do you wish to procced conversion from: %.2f %@ (without fee: %@ %@), to: %@ %@ with included fee of: %.2f %@ (%.2f%%)",
                         totalAmount, fromCurrency, fromAmount, fromCurrency, toAmount, toCurrency, fee, fromCurrency, feeRate)

      let viewModel = CurrencyConverter.FetchCurrencyConversionContract.ViewModel(message: message)

      viewController?.displayCurrencyConversionContract(viewModel: viewModel)
    }
  }

  func presentCompleteCurrencyConversionContract(response: CurrencyConverter.CompleteCurrencyConversionContract.Response) {
    if let error = response.error {
      print("Display ERROR!!!!!")
      presentCurrencyConversionErrorAlert(error: error)

    }else if let totalAmount = response.totalAmount, let fromCurrency = response.fromCurrency,
             let toAmount = response.toAmount, let toCurrency = response.toCurrency,
             let fee = response.fee {

      let message: String = String(format: "Successfully Converted: %.2f %@ (with fee: %.2f %@), to: %@ %@",
                         totalAmount, fromCurrency, fee, fromCurrency, toAmount, toCurrency)

      let viewModel = CurrencyConverter.CompleteCurrencyConversionContract.ViewModel(message: message)

      viewController?.displayCompleteCurrencyConversionContract(viewModel: viewModel)
    }
  }

  func presentBalanceCells(response: CurrencyConverter.CollectionView.Response.BalanceCell) {
    if let error = response.error {
      print("Display ERROR!!!!!")
      presentCurrencyConversionErrorAlert(error: error)

    }else if let storedCurrencies = response.objects {
      let cellViewModels: [CurrencyConverter.CollectionView.ViewModel.BalanceCell] = storedCurrencies.map { (currency: StoredCurrency) -> CurrencyConverter.CollectionView.ViewModel.BalanceCell in
        let holdingAmount = String(format: "%.2f", currency.holdingAmount)
        let cellViewModel = CurrencyConverter.CollectionView.ViewModel.BalanceCell(currencyName: currency.name, holdingAmount: holdingAmount)
        return cellViewModel
      }

      let viewModel = CurrencyConverter.CollectionView.ViewModel(displayedObjects: cellViewModels)
      viewController?.displayCollectionViewBalances(viewModel: viewModel)
    }
  }
}
